# -*- coding: utf-8 -*-
"""House Price.ipynb

Automatically generated by Colab.

Original file is located at
    https://colab.research.google.com/drive/1ssGckE1trzEeB8FOxzVSpP-JMA3a3zZt
"""

from google.colab import drive
drive.mount('/content/drive')
import pandas as pd
import matplotlib.pyplot as plt
import seaborn as sns
import numpy as np

"""## In this project, we will discuss the factors that affect a property's sale price.

**Data description**

**SalePrice - the property's sale price in dollars. This is the target variable that you're trying to predict.**

MSSubClass: The building class

MSZoning: The general zoning classification

LotFrontage: Linear feet of street connected to property

LotArea: Lot size in square feet

Street: Type of road access

Alley: Type of alley access

LotShape: General shape of property

LandContour: Flatness of the property

Utilities: Type of utilities available

LotConfig: Lot configuration

LandSlope: Slope of property

Neighborhood: Physical locations within Ames city limits

Condition1: Proximity to main road or railroad

Condition2: Proximity to main road or railroad (if a second is present)

BldgType: Type of dwelling

HouseStyle: Style of dwelling

OverallQual: Overall material and finish quality

OverallCond: Overall condition rating

YearBuilt: Original construction date

YearRemodAdd: Remodel date

RoofStyle: Type of roof

RoofMatl: Roof material

Exterior1st: Exterior covering on house

Exterior2nd: Exterior covering on house (if more than one material)

MasVnrType: Masonry veneer type

MasVnrArea: Masonry veneer area in square feet

ExterQual: Exterior material quality

ExterCond: Present condition of the material on the exterior

Foundation: Type of foundation

BsmtQual: Height of the basement

BsmtCond: General condition of the basement

BsmtExposure: Walkout or garden level basement walls

BsmtFinType1: Quality of basement finished area

BsmtFinSF1: Type 1 finished square feet

BsmtFinType2: Quality of second finished area (if present)

BsmtFinSF2: Type 2 finished square feet

BsmtUnfSF: Unfinished square feet of basement area

TotalBsmtSF: Total square feet of basement area

Heating: Type of heating

HeatingQC: Heating quality and condition

CentralAir: Central air conditioning

Electrical: Electrical system

1stFlrSF: First Floor square feet

2ndFlrSF: Second floor square feet

LowQualFinSF: Low quality finished square feet (all floors)

GrLivArea: Above grade (ground) living area square feet

BsmtFullBath: Basement full bathrooms

BsmtHalfBath: Basement half bathrooms

FullBath: Full bathrooms above grade

HalfBath: Half baths above grade

Bedroom: Number of bedrooms above basement level

Kitchen: Number of kitchens

KitchenQual: Kitchen quality

TotRmsAbvGrd: Total rooms above grade (does not include bathrooms)

Functional: Home functionality rating

Fireplaces: Number of fireplaces

FireplaceQu: Fireplace quality

GarageType: Garage location

GarageYrBlt: Year garage was built

GarageFinish: Interior finish of the garage

GarageCars: Size of garage in car capacity

GarageArea: Size of garage in square feet

GarageQual: Garage quality

GarageCond: Garage condition

PavedDrive: Paved driveway

WoodDeckSF: Wood deck area in square feet

OpenPorchSF: Open porch area in square feet

EnclosedPorch: Enclosed porch area in square feet

3SsnPorch: Three season porch area in square feet

ScreenPorch: Screen porch area in square feet

PoolArea: Pool area in square feet

PoolQC: Pool quality

Fence: Fence quality

MiscFeature: Miscellaneous feature not covered in other categories

MiscVal: $Value of miscellaneous feature

MoSold: Month Sold

YrSold: Year Sold

SaleType: Type of sale

SaleCondition: Condition of sale
"""

pd.set_option('display.max_columns',81)
df = pd.read_csv('/content/drive/My Drive/Colab Notebooks/Data Analysis/Ex/House Price/train.csv')
df

"""### 1. Data Overview"""

df.shape

df.memory_usage().sum()

df.info()

pd.set_option('display.max_columns',40)
df.describe()

"""### Overview of variables that are related to 'SalePrice'."""

#Do this to see all the correlation relationship between variates.
numeric_df = df.select_dtypes(include=['float64', 'int64'])
value = numeric_df.corr()
k = 20 # number of variables
cols = value.nlargest(k, 'SalePrice')['SalePrice'].index
cm = np.corrcoef(df[cols].values.T)# show values
plt.figure(figsize = (15,10))
hm = sns.heatmap(cm, cbar=True, annot=True, square=True, annot_kws={'size': 10}, fmt='.2f',yticklabels=cols.values, xticklabels=cols.values)
plt.show()

"""Seeing this chart, we draw conclusion. We have 10 variables, including: 'OverallQual', 'GrLivArea', 'GarageCars','GarageArea', '1stFlrSF','FullBath', 'TotRmsAbvGrd', 'YearBuilt', 'YearRemodAdd', that have a positive correlation relationship with 'SalePrice'. Let's analyze evidently."""

sns.set(style = 'darkgrid')
cols = ['SalePrice', 'OverallQual', 'GrLivArea', 'GarageCars', '1stFlrSF', 'TotRmsAbvGrd', 'YearBuilt']
sns.pairplot(df[cols], size = 3)
plt.show();

"""According to the combined chart, the 'SalePrice' almost ranges from 1 thousand to more than 2 thousand. Besides, we realize that the 'SalePrice' relies on conditions about the property, such as: overall material, living area, garage area with car capacity, number of rooms and construction year.

### 2.Check Data
"""

pd.set_option('display.max_row',81)
df.isnull().sum()

"""Now, we can see the missing values of columns that include PoolQC, Fence, LotFrontage, Alley, MasVnrArea, MasVnrType, BsmtQual, BsmtCond	3,.... We must deal with them"""

df.isnull().sum().sum()

miss_value = df.isnull().sum()
miss_value = miss_value[miss_value>0]
miss_value.sort_values(inplace = True)
miss_value.plot.bar()

"""We have 19 columns with missing values. It seems to be empty values ​​rather than lost."""

total = df.isnull().sum().sort_values(ascending = False)
percent = (total/df.isnull().count().sort_values(ascending = False))
board = pd.concat([total, percent], axis = 1, keys = ['total', 'percent'])
board = board[(board['total']>0) & (board['percent']>=0)]
board

"""This table shows that we have 4 columns with over 80% missing data and 3 columns with 59% missing data down to 0%. However, all of them aren't related to 'SalePrice' so we won't take care. <br>
Look through this table. Almost the other variables don't correspond with the variable that needs to be analyzed, and the percent missing value of them is too small, so we will drop them.
"""

# pd.set_option('display.max_rows',81)
# a = board[board['total'] > 1]
df = df.drop((board[board['total'] > 1].index), axis = 1)
df = df.drop(df.loc[df['Electrical'].isnull()].index)
df.isnull().sum()

"""Next, going to check the outliers. Remember the Empirical Rule, we will check the values that are outside the 3 of standard deviation. In contrast, the other 99.7% data within this scope that needs to be kept."""

q_low = df['SalePrice'].quantile(0.0015)
q_high = df['SalePrice'].quantile(0.9985)
print(q_low, q_high)

import numpy as np
Q1 = np.percentile(df['SalePrice'], 25)
Q3 = np.percentile(df['SalePrice'], 75)
interquartile = Q3 - Q1
# print(Q1, Q3, interquartile)
q_low = Q1 - 1.5 * interquartile
q_high = Q3 + 1.5 * interquartile
print(q_low, q_high)

"""The outliers is that the values are outside range from 3937.5 to 340037.5. Here is box plot that show clearly about that"""

df.boxplot(column = ['SalePrice'])

"""### 3. Analyzing Sale Price"""

df['SalePrice'].describe()

"""The decription make it clear that the mean value is higher than the median value. It follows that the chart is right skew."""

sns.set(style = ('darkgrid'))
sns.histplot(data = df['SalePrice'], kde = True);

"""Few notes from observing ditstribution
* Deviate from the normal distribution
* Have appreciable positive skewness.
* The price ranges from 100.000 to 400.000 including outliers.

### 3. Relationship with numeric variates

Firstly, GrLivArea - Above grade (ground) living area square feet
"""

print(df['SalePrice'].corr(df['GrLivArea']))
data2 = pd.concat([df['SalePrice'], df['GrLivArea']], axis=1)
sns.set(style = ('darkgrid'))
sns.scatterplot( x = 'GrLivArea', y = 'SalePrice', data = data2);

"""Through the chart, we can see a positive correlation between 'GrLivArea' and 'SalePrice' that is 0.7086. It suggests that the sale price will increase in proportion to the living area.</br>
We see 2 points that have a large living area, but they didn't sell at a high price. These are the outliers that need to be resolved.
"""

df.sort_values(by = 'GrLivArea', ascending = False)[:2]
df = df.drop(df[df['Id'] == 1299].index)
df = df.drop(df[df['Id'] == 524].index)

data2 = pd.concat([df['SalePrice'], df['GrLivArea']], axis=1)
sns.set(style = ('darkgrid'))
sns.scatterplot( x = 'GrLivArea', y = 'SalePrice', data = data2);

"""Secondly, TotRmsAbvGrd - Total rooms above grade (does not include bathrooms)



"""

print(df['SalePrice'].corr(df['TotRmsAbvGrd']))
data = pd.concat([df['TotRmsAbvGrd'], df['SalePrice']], axis = 1)
# print(data)
sns.scatterplot( x = 'TotRmsAbvGrd', y = 'SalePrice', data = data);

"""The chart indicates that the property will be sold at a high price if it has four to ten rooms. This illustrates how difficult it will be to sell a propety with either few rooms or too many rooms.

### 4. Relationship with categorical variates.

Thirdly, OverallQual - Rates the overall material and finish of the house

10	Very Excellent
       9	Excellent
       8	Very Good
       7	Good
       6	Above Average
       5	Average
       4	Below Average
       3	Fair
       2	Poor
       1	Very Poor
"""

data = pd.concat([df['OverallQual'], df['SalePrice']], axis = 1)
plt.figure(figsize=(10, 6))
sns.boxplot(x = 'OverallQual', y ='SalePrice', hue = 'OverallQual', data = data, palette='coolwarm');

"""The primary takeaway from the chart is that a property with a lot of positive evaluations will be sold for a high price. With the property's evaluations being 9 or 10, the price ranges from nearly 2 thousand to more 6 thousand but it has some outlier prices.

Fourthly, ExterQual: Evaluates the quality of the material on the exterior

Ex	Excellent
       Gd	Good
       TA	Average/Typical
       Fa	Fair
       Po	Poor
"""

data = pd.concat([df['ExterCond'], df['SalePrice']], axis = 1)
order = data.groupby('ExterCond')['SalePrice'].median().sort_values().index
sns.set(style = ('darkgrid'));
sns.boxplot(y='SalePrice', x='ExterCond',hue = 'ExterCond', data=data, order=order);

"""As we can see, the mean sale price with condition material is nearly 2 thousand. It will have high prices and some outlier prices if the house has good, average, or typical material.

###5. Summary
After we compare the 'SalePrice' with some variates, we can indicate that :
 * Both relationships are positive, which means that one variate increases, the other also increases. In the case 'GrLivArea', we see the value of correlation coefficient is 0.708, so it returns that the slope of linear relationships is quite high and clear.
 * The other variates also seem to be related with 'SalePrice'. The relationship is showed clearly by the box plot. This suggest that how the sale price increase with overall quality.
 * We just compared some variates that we thought, because this data also has a lot of variates that needed to be analyzed.
"""